apply plugin: 'java'
apply plugin: 'findbugs'

targetCompatibility = '1.7'
sourceCompatibility = '1.7'

group = 'io.objectbox'
version= rootProject.version

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
    }
    ignoreFailures = true
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile project(':objectbox-java-api')
    compile 'org.greenrobot:essentials:3.0.0-RC1'
    compile 'com.google.flatbuffers:flatbuffers-java:1.8.0'
    compile 'com.google.code.findbugs:jsr305:3.0.2'
    //ptjuanramos dependencies
    compile 'org.json:json:20160212'
	compile 'com.sendgrid:java-http-client:4.2.0'
	
	// https://mvnrepository.com/artifact/com.google.code.gson/gson
	compile group: 'com.google.code.gson', name: 'gson', version: '2.7'
	
	
	testCompile(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntime(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0',
            'org.junit.vintage:junit-vintage-engine:5.1.0',
            'org.junit.platform:junit-platform-launcher:1.1.0',
            'org.junit.platform:junit-platform-runner:1.1.0'
    ) 
}

javadoc {
    failOnError = false
    title = " ObjectBox Java ${version} API"
    options.bottom = 'Available under the Apache License, Version 2.0 - <i>Copyright &#169; 2017 <a href="http://objectbox.io/">ObjectBox Ltd</a>. All Rights Reserved.</i>'
    exclude("**/com/google/**")
    exclude("**/io/objectbox/Cursor.java")
    exclude("**/io/objectbox/KeyValueCursor.java")
    exclude("**/io/objectbox/ModelBuilder.java")
    exclude("**/io/objectbox/Properties.java")
    exclude("**/io/objectbox/Transaction.java")
    exclude("**/io/objectbox/model/**")
    exclude("**/io/objectbox/ideasonly/**")
    exclude("**/io/objectbox/internal/**")
    exclude("**/io/objectbox/reactive/DataPublisherUtils.java")
    exclude("**/io/objectbox/reactive/WeakDataObserver.java")
    def srcApi = project(':objectbox-java-api').file('src/main/java/')
    if (!srcApi.directory) throw new GradleScriptException("Not a directory: ${srcApi}", null)
    source += srcApi
    doLast {
        copy {
            from '../javadoc-style'
            into "build/docs/javadoc/"
        }
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from 'build/docs/javadoc'
}

task sourcesJar(type: Jar) {
	classifier = 'all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
	
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            // Basic definitions are defined in root project
            pom.project {
                name 'ObjectBox Java (only)'
                description 'ObjectBox is a fast NoSQL database for Objects'

                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

// this task is also used by the composite build ('objectbox-deploy'), check before making changes
task verifyVersion {
    group 'verify'
    doLast {
        // verify version in Boxstore.java
        File storeFile = file('src/main/java/io/objectbox/BoxStore.java')
        def versionLine = storeFile.filterLine { line ->
            line.contains("String VERSION =")
        }.toString()

        if (versionLine == null || versionLine.empty) {
            throw new GradleException('Could not find VERSION in ObjectStore.cpp')
        }

        // matches snippet like '12.34.56'
        def boxStoreVersion = versionLine.find("\\d+\\.\\d+\\.\\d+")
        assert ob_expected_version == boxStoreVersion
    }
}
